---
title: "Genetic diversity analises"
format: 
  html:
    page-layout: full
self-contained: true
fig-width: 11
fig-height: 9
code-fold: true
execute: 
  warning: false
---

```{r}
#| echo: false
#| warning: false
#| label: "table pars"
library(flextable)

# Defaults para tablas de resultados
set_flextable_defaults(
  font.size = 10, 
  theme_fun = theme_zebra,
  padding = 6,
  font.family = "Roboto")
```


## Objetivos

Descriptivos:
    - Número de muestras por sitio de muestreo
    - Número de alelos 
    - Alelos rarefacción 
    - Diversidad génica (hs) por población
    - Diversidad génica por especie

Estructura genética 
    - Fst?
    - AMOVA (entre especies, entre poblaciones dentro de las especies) - PHIst 

Estructura filogeográfica 
    - Gst vs Nst

Red de haplotipos 


## Datos

```{r}
library(adegenet)
library(googlesheets4)
library(tidyverse)
library(hierfstat)

# Cargar los datos en adegenet

#gs4_auth(email = "sofia.zorrilla95@gmail.com")

df = read_sheet("https://docs.google.com/spreadsheets/d/1TuepHgDTVpBpM4PaWOm3fZCqwoQWpmTCRvU24AWT7B0/edit?usp=sharing", sheet = 1, col_type = "cccddiiiiiiii")

#df = read.csv("../data/TRES ESPJUNTAS FILOGENPOP - TRES ESPJUNTAS FILOGENPOP.csv", header = T) 

genind = df %>% 
        select(starts_with("locus")) %>% 
        df2genind(X = ., ploidy = 1, sep = "")

genind@pop = as.factor(str_remove(df$pop,"pop"))
genind@strata = df[,c(1,3)] %>% mutate(pop = str_remove(df$pop,"pop"))

genind@other = df[,c(1,2,4,5)]

gind_list = list(hy = genind[which(genind@strata$Species == "Quercus hypoleucoides")], 
                si =  genind[which(genind@strata$Species == "Quercus scytophylla")],
                sy = genind[which(genind@strata$Species == "Quercus sideroxyla")])
names(gind_list) = unique(df$Species)

```

### Mapa muestras 
```{r}
#| fig-width: 15

Mexico <- map_data(map = "world", region = "mexico")

map = ggplot()+
    geom_polygon(data = Mexico, aes(x = long, y = lat, group = group))+
    geom_point(data = genind@other, aes(x = lon, y = lat, color = Species))
map
```

## Descriptivos: Diversidad genética

```{r}
library(officer)
library(tibble)
library(tidyr)
library(gtools)


# summary adegenet
sum_ade = summary(genind)

# basic stats hierfstat (per locus and overall)

hfstat_all <- genind2hierfstat(genind)

basicstat <- basic.stats(hfstat_all, diploid = FALSE, digits = 2) 


per_loc = cbind(Locus = rownames(basicstat$perloc),basicstat$perloc[,which(colnames(basicstat$perloc) %in% c("Hs","Ht"))], n_alleles = sum_ade$loc.n.all) %>% mutate(Locus = str_remove(Locus,"locus_"))

flextable(per_loc) %>% 
    set_header_labels(n_alleles = "Número de\nalelos") %>%
    align( part = "all", align = "center")


# lista de formatos de hierfstat por especie
hfstat_list = lapply(gind_list, genind2hierfstat)
names(hfstat_list) = unique(df$Species)

basicstat_sp = lapply(hfstat_list, function(x) basic.stats(x,diploid = F,digits = 2))

overall_sp = lapply(seq_along(basicstat_sp), 
        function(x){data.frame(value = basicstat_sp[[x]]$overall) %>%
                                 rownames_to_column(var = "var") %>%
                                 mutate(sp = names(basicstat_sp[x]))}) %>% 
    do.call(rbind,.) %>% 
    pivot_wider(id_cols = sp, names_from = var, values_from = value)

# Hs per population
hs = Hs(hfstat_all)

library(poppr)
# Medidas de diversidad aplicadas a genética 
stats_pop = poppr(genind, minsamp = 8)

```

```{r}
## polysat = calcular Gst y Rst

library(polysat)

# Preparar formato genambig
gen = gind_list[[2]]
ploidy = 1
genind2ambig <- function(gen,ploidy){
        gendf <- genind2df(gen, sep = "/", usepop = FALSE)
        gendf <- lapply(gendf, lapply, as.numeric)
        ambig <- new("genambig", samples = indNames(gen), loci = locNames(gen))

        for (i in 1:length(names(gendf))){
            j = names(gendf)[i]
            res <- lapply(gendf[[j]], function(x) ifelse(is.na(x), Missing(ambig), x))
            Genotypes(ambig, loci = i) <- res
        }

        Ploidies(ambig) = rep(1,length(gen@loc.n.all))
        PopInfo(ambig) = as.character(gen@pop)
        PopNames(ambig) = as.character(levels(gen@pop))
        Usatnts(ambig) = c(rep(ploidy,length(gen@loc.n.all)))
        return(ambig)
}

ambig <- genind2ambig(genind,1)

list_ambig <- lapply(gind_list,function(x)genind2ambig(x,ploidy = 1))

get_gst <- function(ambig){
    Gst = calcPopDiff(simpleFreq(ambig), metric = "Gst", global = T, bootstrap = F)
    bootGst = calcPopDiff(simpleFreq(ambig), metric = "Gst", global = T, bootstrap = T)
    ci.Gst <- quantile(bootGst, c(0.025, 0.975))
    return(data.frame(Gst = format(Gst,digits = 3), ci.Gst = paste0("(",format(ci.Gst[1],digits = 2),", ",format(ci.Gst[2],digits = 2),")")))
}

get_rst <- function(ambig){
    Rst = calcPopDiff(simpleFreq(ambig), metric = "Rst", global = T, bootstrap = F, object = ambig)
    bootRst = calcPopDiff(simpleFreq(ambig), metric = "Rst", global = T, bootstrap = T, object = ambig)
    ci.Rst <- quantile(bootRst, c(0.025, 0.975))
    return(data.frame(Rst = format(Rst,digits = 3), ci.Rst = paste0("(",format(ci.Rst[1],digits = 2),", ",format(ci.Rst[2],digits = 2),")")))
}

list_gst <- lapply(list_ambig,get_gst) %>%
                do.call(rbind,.)
list_rst <- lapply(list_ambig,get_rst)%>%
                do.call(rbind,.)

overall_gst = get_gst(ambig)
overall_rst = get_rst(ambig)

```

```{r}
# Per species 

n_sp = genind@strata %>%
    group_by(Species,pop)%>%
    mutate(n = n())%>%
    distinct()%>%
    group_by(Species)%>%
    reframe(npop = n(), n = sum(n))

cbind(overall_sp,
        list_gst[c(1,3,2),],
        list_rst[c(1,3,2),],
        n_sp[,-1]) %>% 
    flextable(.,col_keys = c("sp","npop","n","Hs","Ht","Fst","Gst","ci.Gst","Rst","ci.Rst")) %>% 
    add_footer_row(.,values = c("Total",
                                sum(n_sp$npop),
                                sum(n_sp$n),
                                basicstat$overall[c("Hs","Ht","Fst")],
                                overall_gst,
                                overall_rst), colwidths = c(1,1,1,1,1,1,1,1,1,1))%>%
    align(j = 2:7, part = "footer",align = "right") %>%
    bold(j = 1:10, part = "footer") %>%
    italic(j = 1, i = 1:3, part = "body") %>%
    set_header_labels(sp = "Especie",npop = "Número de\nlocalidades", n = "Número de\nindividuos" )
```

```{r}
# Crear tabla para las poblaciones
strata = strata(genind)%>%
         group_by(Species,pop)%>%
         reframe(n = n())%>%
         mutate(pop = as.numeric(pop))%>%
         arrange(pop,.by_group = T)

border = fp_border(color="black", width = 1)

data.frame(pop = as.numeric(names(hs)),
           hs = format(hs, digits = 3),
           Ar = format(stats_pop$eMLG[-length(stats_pop$eMLG)], digits = 2),
           s.e.Ar = format(stats_pop$SE[-length(stats_pop$eMLG)], digits = 2)) %>%
    arrange(pop) %>% 
    left_join(strata, by = "pop") %>%
    flextable(col_keys = c("Species","pop","n","hs","Ar","s.e.Ar")) %>%
    merge_v(j = ~Species) %>%
    hline(i = c(14,35,51), part = "body", border = border) %>%
    hline_bottom(part = "all", border = border) %>%
    align(part = "all", align = "center")%>%
    set_header_labels(Species = "Especie",
                        n = "Número de\nindividuos",
                        pop = "Población",
                        hs = "Hs")
```

## Estructura filogeográfica (no se como aun, posibilidad SPAGeDi)

```{r}
#| eval: false
#| include: false

library(mmod)

diff_stats_all <- diff_stats(genind)
diff_stats_all

diff_stats_sp = lapply(gind_list,diff_stats)
diff_stats_sp

#set.seed(20151219) # Be sure to set a seed for any random analysis!
#reps <- chao_bootstrap(genind, nreps = 10)
#summarise_bootstrap(reps,  diff_stats) 

nei = nei.dist(genind)


## polysat 

library(polysat)

# Preparar formato genambig
gen = genind
gendf <- genind2df(gen, sep = "/", usepop = FALSE)
gendf <- lapply(gendf, lapply, as.numeric)
ambig <- new("genambig", samples = indNames(gen), loci = locNames(gen))

for (i in 1:length(names(gendf))){
    j = names(gendf)[i]
    res <- lapply(gendf[[j]], function(x) ifelse(is.na(x), Missing(ambig), x))
    Genotypes(ambig, loci = i) <- res
  }

Ploidies(ambig) = rep(1,8)
PopNames(ambig) = as.character(levels(genind@pop))
PopInfo(ambig) = as.character(genind@pop)
Usatnts(ambig) = c(1,1,1,1,1,1,1,1)

bootGst = calcPopDiff(simpleFreq(ambig), metric = "Gst", global = T, bootstrap = T)
quantile(bootGst, c(0.025, 0.975))

write.SPAGeDi(ambig, file = "spagedi.txt")
```

## Estructura genética 


```{r}
library("poppr")

# Función para obtener resultados del amova con formato adecuado

get_res_table <- function(res, seed, type = "pop", name = NULL){
    if(type == "global"){
        name = "Global"
        # Juntar los datos
        amova <- format(res$componentsofcovariance,digits = 3) 
        amova$names_phi = c(str_remove(rownames(res$statphi)[c(3,2,1)],"Phi-"),"")
        amova$phi <- c(format(res$statphi[,1][c(3,2,1)],digits = 3),"")

        # prueba de hipotesis
        set.seed(seed)
        test <- randtest(res, nrepet = 999)

        # agregar pvalor
        amova$pval <- c(test$pvalue,"")
        } else{

        amova <- format(res$componentsofcovariance,digits = 3) 
        amova$names_phi = c(str_remove(rownames(res$statphi),"Phi-"),"","")
        amova$phi <- c(format(res$statphi[,1],digits = 3),"","")

        # prueba de hipotesis
        set.seed(seed)
        test <- randtest(res, nrepet = 999)

        # agregar pvalor
        amova$pval <- c(test$pvalue,"","")
        }

    #Formato

    return(amova %>% 
    rownames_to_column(var = "comp") %>%
    flextable(col_keys = c("comp","%","names_phi","phi","pval")) %>%
    set_header_labels(comp = name, `%` = "Porcentaje",names_phi = "",pval = "p.valor")%>%
    width(j = c(1,3),width = 2))}


# Global
res <- poppr.amova(genind, ~  Species/pop, within = FALSE)

global <- get_res_table(res,98750, type = "global")

global

# Para cada especie

res_pop <- lapply(gind_list, function(x)poppr.amova(x, ~ pop, within = F))
names(res_pop) <- c("Q. hypoleucoides", "Q. sideroxyla", "Q. syctophylla")

seeds <- list(1635, 5467, 5391)

amova_sp <- lapply(seq_along(res_pop),function(x){get_res_table(res_pop[[x]],seeds[[x]],type = "pop", name = names(res_pop[x]))})

amova_sp[[1]]
amova_sp[[2]]
amova_sp[[3]]

```


## Red de haplotipos


```{r}
#| include: false
library(poppr)
dist = bitwise.dist(genind)
setPop(genind) <- ~Species
#net = bruvo.msn(genind)

#bruvo.msn(genind, replen = rep(2, 51), vertex.label="inds", 
#               vertex.label.cex=0.7, vertex.label.dist=0.4)

#poppr.msn(genind, dist, vertex.label = NA)
```

[**Red de haplotipos Randomized Minimum Spanning Tree**](DOI: 10.1111/2041-210X.12969)

```{r}
#| fig-width: 15
#| fig-height: 10
#| warning: false
#| output: false

library(pegas)
library(ggraph)
library(igraph)

# Generar red de haplotipos

get_hapNet <- function(gind){

    gind@strata = NULL
    loc = as.loci(gind)

    h = pegas::haplotype(loc, locus = 1:8)

    dist = dist.haplotype.loci(h)

    nt = pegas::rmst(dist)

    # Nombres de los haplotipos
    nt.labs <- attr(nt, "labels")

    # tamaño proporcional a la frecuencia
    sz = attr(h,"freq")
    names(sz) = seq(1,length(sz),1)
    sz = sz[nt.labs]

    return(list(h = h,dist = dist,nt = nt,nt.labs = nt.labs,sz = sz))
}

global.nt  <- get_hapNet(genind)


# Colores por especie

# Calcular frecuencias de haplotipos por categoria. loc es un objeto loci y cat es el vector de caracter de categorias (1 elemento por individuo) en el orden del archivo original 

hap_freq <- function(gind,h, cat){
    if(!is.null(strata(gind))){
    gind@strata = NULL}

    loc = as.loci(gind)
    ind = as.data.frame(loc)
    ind$hap = 0

    list = as.data.frame(h[1:nrow(h),1:ncol(h)])


    for(i in 1:ncol(list)){

        t = apply(ind[,-c(1,10)],1,function(x) {all(x == list[,i])})
        ind$hap[which(t)] = i
    }

    ind$sp = cbind(cat)

    freq = ind[,c(10,11)] %>% 
            group_by(hap,sp) %>% 
            mutate(Freq = n(), hap = as.character(hap)) %>% distinct() %>%  ungroup %>%
            pivot_wider(id_cols = c(hap), names_from = sp, values_from = Freq, values_fill = 0) 
    return(freq)
}

freq = hap_freq(gind = genind, h = global.nt$h,cat = as.character(genind@strata$Species))

# ordenar los haplotipos de acuerdo a nt.labs
Sp = freq[global.nt$nt.labs,] %>% as.data.frame()
rownames(Sp) = Sp$hap

```
```{r}
#| fig-width: 15
#| fig-height: 10
#| warning: false
#| output: false

# Cargar coordenadas
load("xy_hapNet.RData")
load("global_nt.RData")
# Cargar red 


#pdf("../outputs/red_pegas.pdf", width = 20, height = 10)
plot(global.nt$nt, size = global.nt$sz/2, pie = as.matrix(Sp[,-1]), legend = c(0, 30), cex = 0.5, threshold = c(0,0), xy = xy)
#dev.off()

# Para ajustar las coordenadas de los haplotipos de manera interactiva 
#xy = replot()
#save(xy,file = "xy_hapNet.RData")
#nt = global.nt
#save(nt,file = "global_nt.RData")
```

```{r}
#| fig-width: 15
#| fig-height: 10
#| warning: false

library(scatterpie)
library(graphlayouts)

igraph = as.igraph.haploNet(global.nt$nt)

igraph_df = igraph %>% igraph::as_data_frame(., 'both') 

xy <- layout_with_stress(igraph)
colnames(xy) = c("x","y")

freq = freq %>% rowwise()%>% mutate(tot = sum(`Quercus hypoleucoides`,`Quercus scytophylla`,`Quercus sideroxyla`))

igraph_df[[1]] = igraph_df[[1]] %>% left_join(freq,by = c("name" = "hap"))   %>% cbind(xy)

multiply <- scales::trans_new(name  = "transform", 
                          transform = function(x) x*5,
                          inverse   = function(x) x*5)

g = graph_from_data_frame(igraph_df$edges,directed = F,vertices = igraph_df$vertices) %>% 
    ggraph(.)+
    #ggraph()+
    geom_edge_link()+#aes(edge_colour = weight < 14)) + 
    geom_node_point()+
    geom_scatterpie(data = igraph_df$vertices, aes(x = x, y  = y, r = ((tot/50)/pi)^(1/2)), cols = c("Quercus hypoleucoides","Quercus scytophylla","Quercus sideroxyla"))+
    geom_node_text(aes(label = name), repel=TRUE)+
    coord_trans(x = multiply, y = multiply)+
    scale_edge_colour_manual(values = c("#FFFFFF","#000000"))+
    theme_graph()

g

```

## Red Q. hypoleucoides


```{r}
#| warning: false
#| output: false

hy.net  <- get_hapNet(gind_list[[1]])

freq.hy = hap_freq(gind = gind_list[[1]], h = hy.net$h,cat = as.character(gind_list[[1]]@pop))

# ordenar los haplotipos de acuerdo a nt.labs
pop.hy = freq.hy[hy.net$nt.labs,] %>% as.data.frame()
rownames(pop.hy) = pop.hy$hap

igraph = as.igraph.haploNet(hy.net$nt)

igraph_df = igraph %>% igraph::as_data_frame(., 'both') 

xy <- layout_with_stress(igraph)
colnames(xy) = c("x","y")

freq.hy$tot  <- rowSums(freq.hy[,-1])

igraph_df[[1]] = igraph_df[[1]] %>% left_join(freq.hy,by = c("name" = "hap"))   %>% cbind(xy)

multiply <- scales::trans_new(name  = "transform", 
                          transform = function(x) x*5,
                          inverse   = function(x) x*5)

```

```{r}
#| fig-width: 15
#| fig-height: 10
#| warning: false

graph_from_data_frame(igraph_df$edges,directed = F,vertices = igraph_df$vertices) %>% 
    ggraph(.)+
    geom_edge_link()+
    geom_node_point()+
    geom_scatterpie(data = igraph_df$vertices, aes(x = x, y  = y, r = ((tot/50)/pi)^(1/2)), cols = colnames(freq.hy[,-c(1,ncol(freq.hy))]))+
    geom_node_text(aes(label = name), repel=TRUE)+
    coord_trans(x = multiply, y = multiply)+
    scale_edge_colour_manual(values = c("#FFFFFF","#000000"))+
    theme_graph()

# threshold controla la impresión de los caminos alternativos. Las aristas con línea continua muestran el MST, las punteadas muestran los alternativos. Threshold (0,0) te deja el puro árbol. 

#pdf("../outputs/red_pegas_hy.pdf", width = 20, height = 10)
plot(hy.net$nt, size = hy.net$sz/3, pie = as.matrix(pop.hy[,-1]), legend = c(0, 30), cex = 1, threshold = c(0,0))
#dev.off()
```

## Red Q. syctophylla


```{r}
#| warning: false
#| output: false

sy.net  <- get_hapNet(gind_list[[2]])

freq.sy = hap_freq(gind = gind_list[[2]], h = sy.net$h,cat = as.character(gind_list[[2]]@pop))

# ordenar los haplotipos de acuerdo a nt.labs
pop.sy = freq.sy[sy.net$nt.labs,] %>% as.data.frame()
rownames(pop.sy) = pop.sy$hap

igraph = as.igraph.haploNet(sy.net$nt)

igraph_df = igraph %>% igraph::as_data_frame(., 'both') 

xy <- layout_with_stress(igraph)
colnames(xy) = c("x","y")

freq.sy$tot  <- rowSums(freq.sy[,-1])

igraph_df[[1]] = igraph_df[[1]] %>% left_join(freq.sy,by = c("name" = "hap"))   %>% cbind(xy)

multiply <- scales::trans_new(name  = "transform", 
                          transform = function(x) x*5,
                          inverse   = function(x) x*5)
```

```{r}
#| fig-width: 15
#| fig-height: 10
#| warning: false

sy = graph_from_data_frame(igraph_df$edges,directed = F,vertices = igraph_df$vertices) %>% 
    ggraph(.)+
    geom_edge_link()+
    geom_node_point()+
    geom_scatterpie(data = igraph_df$vertices, aes(x = x, y  = y, r = ((tot/20)/pi)^(1/2)), cols = colnames(freq.sy[,-c(1,ncol(freq.sy))]))+
    geom_node_text(aes(label = name), repel=TRUE)+
    coord_trans(x = multiply, y = multiply)+
    scale_edge_colour_manual(values = c("#FFFFFF","#000000"))+
    theme_graph()

sy

# threshold controla la impresión de los caminos alternativos. Las aristas con línea continua muestran el MST, las punteadas muestran los alternativos. Threshold (0,0) te deja el puro árbol. 
#pdf("../outputs/red_pegas_sy.pdf", width = 20, height = 10)
plot(sy.net$nt, size = sy.net$sz/3, pie = as.matrix(pop.sy[,-1]), legend = c(0, 30), cex = 1, threshold = c(0,0))
#dev.off()
```

## Red Q. sideroxyla


```{r}
#| warning: false
#| output: false

si.net  <- get_hapNet(gind_list[[3]])

freq.si = hap_freq(gind = gind_list[[3]], h = si.net$h,cat = as.character(gind_list[[3]]@pop))

# ordenar los haplotipos de acuerdo a nt.labs
pop.si = freq.si[si.net$nt.labs,] %>% as.data.frame()
rownames(pop.si) = pop.si$hap

igraph = as.igraph.haploNet(si.net$nt)

igraph_df = igraph %>% igraph::as_data_frame(., 'both') 

xy <- layout_with_stress(igraph)
colnames(xy) = c("x","y")

freq.si$tot  <- rowSums(freq.si[,-1])

igraph_df[[1]] = igraph_df[[1]] %>% left_join(freq.si,by = c("name" = "hap"))   %>% cbind(xy)

multiply <- scales::trans_new(name  = "transform", 
                          transform = function(x) x*5,
                          inverse   = function(x) x*5)

```

```{r}
#| fig-width: 15
#| fig-height: 10
#| warning: false

graph_from_data_frame(igraph_df$edges,directed = F,vertices = igraph_df$vertices) %>% 
    ggraph(.)+
    geom_edge_link()+
    geom_node_point()+
    geom_scatterpie(data = igraph_df$vertices, aes(x = x, y  = y, r = ((tot/20)/pi)^(1/2)), cols = colnames(freq.si[,-c(1,ncol(freq.si))]))+
    geom_node_text(aes(label = name), repel=TRUE)+
    coord_trans(x = multiply, y = multiply)+
    scale_edge_colour_manual(values = c("#FFFFFF","#000000"))+
    theme_graph()

# threshold controla la impresión de los caminos alternativos. Las aristas con línea continua muestran el MST, las punteadas muestran los alternativos. Threshold (0,0) te deja el puro árbol. 

#pdf("../outputs/red_pegas_si.pdf", width = 20, height = 10)
plot(si.net$nt, size = si.net$sz/3, pie = as.matrix(pop.si[,-1]), legend = c(0, 30), cex = 1, threshold = c(0,0))
#dev.off()
```
```